@page "/login"

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<FormCard FormTitle="Login">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-warning">
            @errorMessage
        </div>
    }

    <EditForm method="post" Model="LoginInput" OnSubmit="OnSubmitLogin" FormName="UserLogin">
        <label class="form-label" for="username">Username:</label>
        <div class="input-group mb-3">
            <span class="input-group-text">
                <IconFace />
            </span>
            <InputText class="form-control" @bind-Value="LoginInput.Username" id="username" required />
        </div>

        <label class="form-label" for="password">Password:</label>
        <div class="input-group mb-3">
            <span class="input-group-text">
               <IconLock />
            </span>
            <InputText class="form-control" @bind-Value="LoginInput.Password" type="password" id="password" required />
        </div>

        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </EditForm>
</FormCard>

@code {
    string? errorMessage;

    [SupplyParameterFromForm]
    public AuthRequest LoginInput { get; set; } = new();

    public async Task OnSubmitLogin()
    {
        try
        {
            await AuthService.Login(LoginInput);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine("failed", ex.Message);
            errorMessage = ex.Message;
        }
    }
}
