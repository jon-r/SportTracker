@page "/"
@attribute [Authorize]
@inject ISportEventRepository SportEventRepository

<FormCard FormTitle="Submit Activity">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-warning">
            @errorMessage
        </div>
    }

    @if (submitted)
    {
        <div class="alert alert-success">Submitted!</div>
    }

    <EditForm method="post" Model="EventInput" OnSubmit="OnSubmitEvent" FormName="SubmitEvent">
        <label class="form-label" for="time">Time:</label>
        <InputNumber class="form-control mb-3" @bind-Value="EventInput.Time" id="time" required min="1" />

        <label class="form-label" for="laps">Laps:</label>
        <InputNumber class="form-control mb-3" @bind-Value="EventInput.Laps" id="laps" required min="1" />

        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </EditForm>
</FormCard>

@code {
    string? errorMessage;
    bool submitted = false;

    [SupplyParameterFromForm]
    SportEventInput EventInput { get; set; } = new() { EventType = SportEventType.Swimming, };

    async Task OnSubmitEvent()
    {
        try
        {
            await SportEventRepository.AddEventAsync(EventInput);
            submitted = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("failed", ex.Message);
            errorMessage = ex.Message;
        }
    }
}
